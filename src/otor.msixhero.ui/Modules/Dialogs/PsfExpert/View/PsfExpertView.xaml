<UserControl x:Class="otor.msixhero.ui.Modules.Dialogs.PsfExpert.View.PsfExpertView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mvvm:ViewModelLocator.AutoWireViewModel="True"
             xmlns:local="clr-namespace:otor.msixhero.ui.Modules.Dialogs.PsfExpert.View"
             xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Xceed.Wpf.AvalonDock"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
    xmlns:mvvm="http://prismlibrary.com/"
    xmlns:view="clr-namespace:otor.msixhero.ui.Modules.Common.PackageContent.View"
    xmlns:viewModel="clr-namespace:otor.msixhero.ui.Modules.Dialogs.PsfExpert.ViewModel"
    xmlns:system="clr-namespace:System;assembly=System.Runtime"
    xmlns:items="clr-namespace:otor.msixhero.ui.Modules.Dialogs.PsfExpert.ViewModel.Items"
    xmlns:routedCommand="clr-namespace:otor.msixhero.ui.Commands.RoutedCommand"
    d:DataContext="{d:DesignInstance viewModel:PsfExpertViewModel}">
    <mvvm:Dialog.WindowStyle>
        <Style TargetType="Window">
            <Setter Property="SizeToContent" Value="Manual" />
            <Setter Property="Width" Value="650" />
            <Setter Property="Height" Value="600" />
            <Setter Property="MinWidth" Value="500" />
            <Setter Property="MinHeight" Value="450" />
        </Style>
    </mvvm:Dialog.WindowStyle>
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/msixhero;component/Themes/Colors.xaml" />
                <ResourceDictionary Source="/msixhero;component/Themes/Converters.xaml" />
                <ResourceDictionary Source="/msixhero;component/Themes/Extras.xaml" />
                <ResourceDictionary Source="/msixhero;component/Themes/Tabs.xaml" />
                <ResourceDictionary Source="/msixhero;component/Themes/Generic.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="Path" x:Key="Icon">
                <Setter Property="Width" Value="32" />
                <Setter Property="Height" Value="32" />
                <Setter Property="Fill" Value="#999" />
            </Style>

            <Style TargetType="view:BulletItemControl">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="view:BulletItemControl">
                            <DockPanel>
                                <Border Width="32" Height="32" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 0 0 10">
                                    <ContentPresenter Width="32" Content="{TemplateBinding Header}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                                </Border>

                                <Border Width="1" SnapsToDevicePixels="True" UseLayoutRounding="True" VerticalAlignment="Stretch" Background="#DDD" Margin="10 0" />

                                <StackPanel IsItemsHost="True" Margin="0 0 0 10" />
                            </DockPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
            <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
            <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFECF4FC" Offset="0.0"/>
                <GradientStop Color="#FFDCECFC" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
            <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
                <GradientStop Color="#FFDCECFC" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
            <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFDAECFC" Offset="0.0"/>
                <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
            <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFDAEBFC" Offset="0.0"/>
                <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
            </LinearGradientBrush>
            <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
            <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
            <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Background" Value="#eee" />
                <Setter Property="BorderBrush" Value="#eee" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border 
                                x:Name="templateRoot" 
                                Background="#eee" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                SnapsToDevicePixels="true" />
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="ComboBox">
                <Setter Property="Margin" Value="4 1" />
                <Setter Property="Padding" Value="4 0" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="30" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <Popup 
                                        x:Name="PART_Popup" 
                                        AllowsTransparency="true" 
                                        IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" 
                                        PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </theme:SystemDropShadowChrome>
                                </Popup>
                                <ToggleButton 
                                        Height="30"
                                        VerticalContentAlignment="Center"
                                        VerticalAlignment="Stretch"
                                        x:Name="toggleButton" 
                                        IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                        Style="{StaticResource ComboBoxToggleButton}"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="true"/>
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </MultiTrigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Margin" Value="4 0" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="4 0" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="30" />
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="False">
                        <Setter Property="Background" Value="#eee" />
                        <Setter Property="Background" Value="#eee" />
                        <Setter Property="BorderBrush" Value="#eee" />
                        <Setter Property="Cursor" Value="Hand" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Background" Value="#eee" />
                <Setter Property="BorderBrush" Value="#eee" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="Margin" Value="4 1" />
                <Setter Property="Padding" Value="4 0" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Height" Value="30" />
                <Setter Property="ClickMode" Value="Press"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style TargetType="TextBlock" x:Key="Prompt">
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="Margin" Value="0 0 4 0" />
                <Setter Property="Foreground" Value="{StaticResource Otor.MsixHero.Brushes.Accent}" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <TabControl Margin="10">
        <TabItem Header="Applications"></TabItem>
        <TabItem Header="File redirections">
            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <routedCommand:RoutedCommandHandlers.Commands>
                    <routedCommand:RoutedCommandHandler Command="{Binding CommandHandler.Edit}" RoutedCommand="Properties" />
                </routedCommand:RoutedCommandHandlers.Commands>
                <ItemsControl ItemsSource="{Binding Redirections.Redirections}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type items:PsfExpertRedirectionIfProcessViewModel}">

                            <view:BulletItemControl>
                                <view:BulletItemControl.Header>
                                    <Viewbox Width="24" Height="24">
                                        <Path Style="{StaticResource Icon}" Data="{StaticResource VectorShortcut}" />
                                    </Viewbox>
                                </view:BulletItemControl.Header>

                                <WrapPanel Margin="0 1">
                                    <TextBlock Text="FOR" Style="{StaticResource Prompt}" />
                                    <TextBlock Text="a call from a" VerticalAlignment="Center" />
                                    <ComboBox SelectedValue="{Binding FixupMode}" SelectedValuePath="Tag">
                                        <ComboBoxItem Content="32-bit" Tag="{x:Static items:PsfExpertRuleConditionRedirectionMode.X86}" />
                                        <ComboBoxItem Content="64-bit" Tag="{x:Static items:PsfExpertRuleConditionRedirectionMode.X64}" />
                                    </ComboBox>
                                    <TextBlock Text="process" VerticalAlignment="Center" />
                                    <Button Command="Properties" CommandParameter="{Binding}" Content="{Binding ProcessName}" />
                                </WrapPanel>

                                <ItemsControl ItemsSource="{Binding DirectoryCondition}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="{x:Type items:PsfExpertRuleConditionViewModel}">
                                            <StackPanel>

                                                <Border Margin="30 1 0 1" Height="24">
                                                    <TextBlock Text="IF" Style="{StaticResource Prompt}" />
                                                </Border>

                                                <ItemsControl ItemsSource="{Binding Positive}" AlternationCount="{Binding Positive.Count}">
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type items:PsfExpertFilePatternViewModel}">
                                                            <WrapPanel Margin="60 1 0 1">
                                                                <TextBlock Tag="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ContentPresenter}, Path=(ItemsControl.AlternationIndex)}" 
                                                                           Text="OR" x:Name="PART_Prompt" >
                                                                    <TextBlock.Style>
                                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource Prompt}">
                                                                            <Style.Triggers>
                                                                                <Trigger Property="Tag">
                                                                                    <Trigger.Value>
                                                                                        <system:Int32>0</system:Int32>
                                                                                    </Trigger.Value>
                                                                                    <Trigger.Setters>
                                                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                                                    </Trigger.Setters>
                                                                                </Trigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </TextBlock.Style>
                                                                </TextBlock>
                                                                <TextBlock VerticalAlignment="Center" Text="requested directory is" />
                                                                <Button Command="Properties" CommandParameter="{Binding}" Content="{Binding FullPath}" />
                                                                <TextBlock VerticalAlignment="Center">
                                                                <Run Text="and" />
                                                                <Run Text="{Binding RegexMode.Prompt, Mode=OneWay}" />
                                                                </TextBlock>
                                                                <Button Command="Properties" CommandParameter="{Binding}" Content="{Binding RegexMode.DisplayName, Mode=OneWay}" />
                                                            </WrapPanel>
                                                            <!--<DataTemplate.Triggers>
                                                            <DataTrigger Bindi Value="1">
                                                                <DataTrigger.Setters>
                                                                    <Setter Property="Visibility" TargetName="PART_Prompt" Value="Collapsed" />
                                                                </DataTrigger.Setters>
                                                            </DataTrigger>
                                                        </DataTemplate.Triggers>-->
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>
                                                <ItemsControl ItemsSource="{Binding Negative}">
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate DataType="{x:Type items:PsfExpertFilePatternViewModel}">
                                                            <StackPanel>
                                                                <Border Margin="30 1 0 1" Height="24">
                                                                    <TextBlock Text="AND" Style="{StaticResource Prompt}" />
                                                                </Border>

                                                                <WrapPanel Margin="60 0 0 0">
                                                                    <TextBlock VerticalAlignment="Center" Text="requested file in folder" Margin="0 1" />
                                                                    <Button Command="Properties" CommandParameter="{Binding}" Content="{Binding FullPath}" />

                                                                    <TextBlock VerticalAlignment="Center">
                                                                        <Run Text="{Binding RegexMode.Prompt, Mode=OneWay}" />
                                                                    </TextBlock>
                                                                    <Button Command="Properties" CommandParameter="{Binding}" Content="{Binding RegexMode.DisplayName, Mode=OneWay}" />

                                                                </WrapPanel>
                                                            </StackPanel>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>

                                                <Border Margin="30 1 0 1" Height="24">
                                                    <TextBlock Text="THEN" Style="{StaticResource Prompt}" />
                                                </Border>

                                                <WrapPanel Margin="60 0 0 0">
                                                    <TextBlock VerticalAlignment="Center" Text="Redirect the file (copy-on-write)" Margin="0 1" />
                                                </WrapPanel>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </view:BulletItemControl>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </TabItem>
        <TabItem Header="Tracing"></TabItem>
        <TabItem Header="Other" />
    </TabControl>
</UserControl>
