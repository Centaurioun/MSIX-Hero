//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Otor.MsixHero.Winget.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Localization {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Localization() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Otor.MsixHero.Winget.Resources.Localization", typeof(Localization).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading… ({0}%).
        /// </summary>
        public static string Winget_Downloading_Format {
            get {
                return ResourceManager.GetString("Winget_Downloading_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not start winget..
        /// </summary>
        public static string Winget_Error_CouldNotStart {
            get {
                return ResourceManager.GetString("Winget_Error_CouldNotStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not download the file..
        /// </summary>
        public static string Winget_Error_DownloadFailed {
            get {
                return ResourceManager.GetString("Winget_Error_DownloadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not download the file {0}..
        /// </summary>
        public static string Winget_Error_DownloadFailed_Format {
            get {
                return ResourceManager.GetString("Winget_Error_DownloadFailed_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found..
        /// </summary>
        public static string Winget_Error_FileNotFound {
            get {
                return ResourceManager.GetString("Winget_Error_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; does not contain a signature..
        /// </summary>
        public static string Winget_Error_NoSignature_Format {
            get {
                return ResourceManager.GetString("Winget_Error_NoSignature_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only MSIX/APPX formats support signature footprints..
        /// </summary>
        public static string Winget_Error_NotMsixAppx {
            get {
                return ResourceManager.GetString("Winget_Error_NotMsixAppx", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your Winget version is too old to perform the validation against the manifest schema v1..
        /// </summary>
        public static string Winget_Error_TooOldWinget {
            get {
                return ResourceManager.GetString("Winget_Error_TooOldWinget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package copyright must be between {0} and {1} characters..
        /// </summary>
        public static string Winget_Validation_Copyright_WrongLength_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_Copyright_WrongLength_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package family name is invalid according to Winget requirements..
        /// </summary>
        public static string Winget_Validation_FamilyName {
            get {
                return ResourceManager.GetString("Winget_Validation_FamilyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The package license must be between {0} and {1} characters..
        /// </summary>
        public static string Winget_Validation_License_WrongLength_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_License_WrongLength_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package name must have between {0} and {1} characters..
        /// </summary>
        public static string Winget_Validation_PackageName_WrongLength_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_PackageName_WrongLength_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publisher name must have between {0} and {1} characters..
        /// </summary>
        public static string Winget_Validation_Publisher_WrongLength_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_Publisher_WrongLength_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The short package description must be between {0} and {1} characters..
        /// </summary>
        public static string Winget_Validation_ShortDescription_WrongLength_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_ShortDescription_WrongLength_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The length of the command cannot exceed {0}..
        /// </summary>
        public static string Winget_Validation_TooLongCommand_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_TooLongCommand_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package family name cannot be longer than {0} characters..
        /// </summary>
        public static string Winget_Validation_TooLongFamilyName_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_TooLongFamilyName_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value cannot be longer than {0} characters..
        /// </summary>
        public static string Winget_Validation_TooLongId_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_TooLongId_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tag cannot be longer than {0} characters..
        /// </summary>
        public static string Winget_Validation_TooLongTag_Format {
            get {
                return ResourceManager.GetString("Winget_Validation_TooLongTag_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value is invalid according to Winget requirements..
        /// </summary>
        public static string Winget_Validation_ValueInvalid {
            get {
                return ResourceManager.GetString("Winget_Validation_ValueInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This value is required..
        /// </summary>
        public static string Winget_Validation_ValueRequired {
            get {
                return ResourceManager.GetString("Winget_Validation_ValueRequired", resourceCulture);
            }
        }
    }
}
